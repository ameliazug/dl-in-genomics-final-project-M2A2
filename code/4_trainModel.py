#!/usr/bin/env python
'''
Purpose:
Train a CNN + BiLSTM model to predict promoter activity from DNA methylation features.

General Notes:
Input data (features) are extracted from methylation profiles using two window sizes: 
250bp and 2500bp. Features represent different aspects of DNA methylation within
windows relative to TSS.

Model architecture:
    - Three 1D convolutional layers to capture local spatial patterns.
    - One BiLSTM layer to model directional progression of methylation patterns.
    - Two fully connected layers (sizes: 128 and 64).
    - Output layer predicts promoter activity (e.g., H3K27ac and/or H3K4me3 enrichment).

#------------------------------------------------------------------------------
Input Required:
1) HDF5 Feature File containing:
    1A) "FeatureInput" array shaped (N, Resolutions, Windows, Features)
    1B) Positional and Gene Metadata arrays (e.g., EnsmblID_T, Gene, Chr, Start, End)

2) Response variable file or array:
    2A) If available, real promoter activity scores (e.g., log2_ChipDivInput for H3K27ac and H3K4me3).
    2B) If only one label is available, dummy labels are generated for the second output.

Input Notes:
    If only a single response variable is present (e.g., only H3K27ac),
    the model can be trained by temporarily filling missing labels with zeros.
    Later, training can be updated once both marks are available.

#------------------------------------------------------------------------------
Output:
1) This script saves the trained model to an .h5 file (ModelFilePath), 
    ready for later loading and prediction.

2) Model weights capture promoter methylation-to-activity relationships learned
    from the input features.

#------------------------------------------------------------------------------
What if...?
    1) Q: What happens if two real promoter activity labels (H3K27ac and H3K4me3) 
          are not both available?
       A: A dummy label (array of zeros) is used for the missing output during training.
          Once both are available, dummy labels can be replaced with real labels.

    2) Q: What if the input HDF5 feature file is missing expected datasets or shapes?
       A: The script will raise an error. Ensure the HDF5 file was generated by the
          correct feature extraction pipeline before running training.
'''

import numpy as np
import pandas as pd
import h5py
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, Bidirectional, LSTM, Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint

# --------------- Load Input --------------- #

def load_training_data(h5_file):
    with h5py.File(h5_file, 'r') as f:
        X = np.array(f["FeatureInput"])[:, :, :, [0, 1, 3]]  # Use features: Ave, Var, FracSSD
        y_df = pd.DataFrame({
            "log2_ChipDivInput": np.array(f["log2_ChipDivInput"]).astype(float)
        })
    return X, y_df

# --------------- Build Model --------------- #

def build_cnn_bilstm_model(input_shape):
    inputs = Input(shape=input_shape)

    # 1st Conv Layer
    x = Conv1D(filters=64, kernel_size=3, activation='relu', padding='same')(inputs)
    # 2nd Conv Layer
    x = Conv1D(filters=128, kernel_size=3, activation='relu', padding='same')(x)
    # 3rd Conv Layer
    x = Conv1D(filters=256, kernel_size=3, activation='relu', padding='same')(x)

    # BiLSTM Layer
    x = Bidirectional(LSTM(64, return_sequences=False))(x)

    # Fully Connected Layers
    x = Dense(128, activation='relu')(x)
    x = Dropout(0.3)(x)
    x = Dense(64, activation='relu')(x)

    # Two outputs (for H3K27ac and H3K4me3 separately)
    output_H3K27ac = Dense(1, name="H3K27ac")(x)
    output_H3K4me3 = Dense(1, name="H3K4me3")(x)

    model = Model(inputs=inputs, outputs=[output_H3K27ac, output_H3K4me3])

    return model

# --------------- Main Training Function --------------- #

def train_model(h5_input_path, output_model_path, epochs=20, batch_size=512):
    # Load input data
    X, y = load_training_data(h5_input_path)

    # Build model
    model = build_cnn_bilstm_model(X.shape[1:])

    # Compile
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss={'H3K27ac': 'mse', 'H3K4me3': 'mse'},
        loss_weights={'H3K27ac': 1.0, 'H3K4me3': 1.0},
        metrics={'H3K27ac': 'mse', 'H3K4me3': 'mse'}
    )

    # Save best model
    checkpoint = ModelCheckpoint(
        output_model_path,
        monitor='loss',
        save_best_only=True,
        save_weights_only=False,
        mode='min',
        verbose=1
    )

    # For now, dummy output for two labels (until HDF5 file has both)
    y_dummy = np.zeros((X.shape[0], 1))  # If no second label

    # Fit model
    model.fit(
        X,
        {'H3K27ac': y['log2_ChipDivInput'].values, 'H3K4me3': y_dummy},  # Replace y_dummy with real label when available
        epochs=epochs,
        batch_size=batch_size,
        callbacks=[checkpoint],
        shuffle=True
    )

# --------------- Run --------------- #

if __name__ == "__main__":
    h5_input_path = "data/A549/methyl_enrichment.h5"  # <<<<=== Replace
    output_model_path = "training_outputs/training_outputs1.h5"  # <<<<=== Replace
    train_model(h5_input_path, output_model_path, epochs=20, batch_size=512)
